# any time that we're making use of Docker, we have to have super user permissions
# so this says "hey Travis, we need super user level permissions in order to execute this build"
sudo: required

# telling Travis that we need Docker CLI preinstalled
# by adding this Travis CI is going to install a copy of Docker into our little running container
services:
  - docker

# a series of different commands that get executed before our test are ran
# some series of set up that needs to ocurr before we start to either deploy our project
# or before we start to run our tests
# we want to build our docker image before the test run
before_install:
  - docker build -t iscanderoff/docker-react -f Dockerfile.dev .
# as a result of docker build we get back the id of the created image
# so far we've been copy pasting that id around
# now we don't get the ability to easily copy paste those ids around
# instead of copy pasting we'll instead just put a tag or a label on the created image
# so we can refer to the created image by a name rather than a randomly generated id
# that is why we put -t
# so in the future we can refer to the created image as iscanderoff/docker-react
# it's not necessary to put this long iscanderoff/docker-react tag
# we can write anything we want
# the tag that is being applied here is only gonna be used inside of this Travis process
# it's not gonna be used anywhere else
# but it's good to use tag naming convention <docker username>/<repository name>

# The script section is supposed to contain all the different commands that need
# to be executed to actually run our test suites
# these are gonna be a series of commands just like before_install was
# that are gonna run when our test need to actually be executed
# Travis CI is gonna be watching the output of each of these commands
# and from each command if it ever gets a return status code other than 0
# Travis is going to assume that our build failed or that our test suite failed to run properly
# and it's going to assume that our code is broken
# In order to run our tests, we're gonna use the same Docker command, that we used earlier
# to start up our container out of that image (iscanderoff/docker-react)
# and run the test inside of it:
# docker run iscacnderoff/docker-react npm run test
# но есть проблема, что при запуске npm run test, сам тест ожидает от нас ввода input'а
# нажатия клавиш и выбора каких-то опций, поэтому этот процесс не завершится сам по себе
# а Travis будет стоять и ждать результатов команды
# To make sure that the test suite automatically exits the instant that the first run is completed
# we're gonna add on a little additional command -- --coverage
# The only thing that Travis cares about is the status code that comes back from running this command
script:
  - docker run iscacnderoff/docker-react npm run test -- --coverage

# So now any time that Travis sees that we have pushed a new commit up to Github,
# it's going to clone all of our code and then use these series of instructions
# to build our docker image, run some tests and then report on whether our test succeeded or failed

# inside this section we're gonna tell Travis CI exactly how to take our app
# and deploy it off to AWS
deploy:
  # Travis CI comes preconfigured to deploy our app to a handful of different providers
  # or hosting providers such as AWS, Digital Ocean or others
  # So by this we're telling Travis CI that "hey we want you to use this set of instructions
  # to attempt to automatically deploy our application"
  # So just by specifying that right there, Travis CI is going to do a lot of stuff for us automatically
  provider: elasticbeanstalk

  # we're going to still provide a lot of other options to just provide some further customization
  region: "us-east-1" # это берем из AWS
  # name of the AWS app
  app: "docker"
  # environment name
  env: "Docker-env"
  # when Travis decides to deploy our code base it's going to take all of the files
  # inside of our Github repository, it's gonna zip them all up into one single file
  # and then it's going to copy all of them over to S3 bucket which is essentially
  # a hard drive running on AWS
  # once it copies all those files over, Travis CI is then going to poke at elasticbeanstalk
  # and say "hey I just uploaded this new ZIP file, use that to redeploy our application"
  # so we need to provide the name of the bucket that Travis CI is going to put our ZIP file into
  # S3 bucket is already automatically generated for us when we initally created the Elastic Beanstalk instance
  # All we have to do is get the name of it
  # В поиске вбиваем сервис "S3" и выбираем S3 - Scalable Storage in the Cloud
  # и выбираем там наш bucket (ищем по региону в названии)
  bucket_name: "elastkcbeanstalk-us-east-1-306476627547"
  # So this S3 bucket that's holding all these different files, it gets reused
  # for all of the different elastic beanstalk environments that we create
  # When we first create our Elastic Beanstalk instance, changes are it's not going to
  # create a folder by default automatically
  # That folder is only going to be created the first time that we do a deploy
  # So by default the bucket_path that we supposed to use is going to be exactly equal to the app name
  bucket_path: "docker"
  # пушим на feature и создаем pull request на merge с master
  # any time we merge code into master that means it is time to deploy our application
  # if we just merge code or push code up to the feature branch, we don't want to deploy the app
  # the feature branch is for active development and it might have new features that are not ready
  # to be deployed
  # So the last piece of configuration is
  # only attempt to deploy the application when the master branch gets some new code
  on:
    branch: master # any time we push code to the master that's the time to deploy

  # "hey, I have an access key for you, but you're going to get it from the local environment configuration"
  access_key_id: "$AWS_ACCESS_KEY"
  secret_access_key:
  secure: "$AWS_SECRET_KEY"
